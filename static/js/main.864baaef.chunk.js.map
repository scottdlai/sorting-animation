{"version":3,"sources":["util/random.ts","hooks/useWindowSize.ts","util/setting.ts","components/Body.tsx","util/swap.ts","algorithms/bubbleSort.ts","algorithms/mergeSort.ts","algorithms/quickSort.ts","algorithms/selectionSort.ts","components/CustomBar.tsx","components/SortingAnimation.tsx","App.tsx","index.tsx"],"names":["random","lower","upper","Math","floor","useWindowSize","useState","width","window","innerWidth","height","innerHeight","size","setSize","useEffect","handleResize","addEventListener","removeEventListener","style","unsorted","sorted","pivot","compared","Body","bars","display","justifyContent","alignItems","map","bar","i","length","backgroundColor","status","color","swap","arr","j","temp","bubbleSort","steps","push","name","indices","index","mergeSortHelper","start","end","animations","mid","l1","l2","l","Array","from","_","r","k","newBar","merge","mergeSort","console","log","quickSortHelper","partionIndex","partition","quickSort","selectionSort","minIndex","algos","CustomBar","resizeBars","isSorting","toggleSorting","numberOfBars","setNumberOfBars","algo","setAlgo","Navbar","expand","bg","variant","Brand","href","Toggle","aria-controls","NavbarCollapse","Form","className","inline","Control","as","value","onChange","target","disabled","type","min","max","step","Number","ButtonGroup","Button","onClick","getAlgo","barsReducer","prevBars","action","n","newSize","newStatus","includes","SortingAnimation","setIsSorting","setAnimations","useReducer","barsDispatch","timer","setTimeout","current","rest","clearTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.864baaef.chunk.js","sourcesContent":["/**\n * Returns a random integer from in the range [`lower`, `upper`].\n *\n * @param lower lower bound (inclusive)\n * @param upper upper bound (inclusive)\n * @returns a random integer in the ranga [`lower`, `upper`]\n */\nconst random = (lower: number, upper: number) => {\n  return Math.floor(Math.random() * (upper - lower + 1) + lower);\n};\n\nexport default random;\n","import { useEffect, useState } from 'react';\n\nexport interface WindowSize {\n  width: number;\n  height: number;\n}\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<WindowSize>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize = () =>\n      setSize({ width: window.innerWidth, height: window.innerHeight });\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","const style = {\n  unsorted: 'magenta',\n  sorted: 'green',\n  pivot: 'orange',\n  compared: '#13669c',\n};\n\nexport default style;\n","import React from 'react';\nimport useWindowSize from '../hooks/useWindowSize';\nimport style from '../util/setting';\nimport { Bar } from './SortingAnimation';\n\nexport interface BodyProps {\n  bars: Bar[];\n}\n\nconst Body = ({ bars }: BodyProps) => {\n  const { width } = useWindowSize();\n\n  const getBarSize = () => {\n    if (width > 1024) {\n      return 64 / bars.length;\n    } else if (width > 640) {\n      return 32 / bars.length;\n    }\n\n    return 16 / bars.length;\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'flex-end',\n        height: '36em', // To fix issue with merge sort\n      }}\n    >\n      {bars.map((bar, i) => (\n        <div\n          key={i}\n          style={{\n            height: `${bar.height / 4}em`,\n            width: `${getBarSize()}em`,\n            backgroundColor: style[bar.status],\n            color: 'white',\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default Body;\n","const swap = (arr: any[], i: number, j: number) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\nexport default swap;\n","import { Action, Bar } from '../components/SortingAnimation';\nimport swap from '../util/swap';\n\nconst bubbleSort = (bars: Bar[]) => {\n  // Steps of sorting algorithm.\n  const steps: Action[] = [];\n  for (let i = 0; i < bars.length - 1; i++) {\n    for (let j = 0; j < bars.length - i - 1; j++) {\n      // comparing\n      steps.push({ name: 'comparing', j, i: j + 1 });\n      if (bars[j + 1].height < bars[j].height) {\n        // swapping\n        steps.push({ name: 'swapping', j, i: j + 1 });\n        swap(bars, j, j + 1);\n      }\n      // resume all the colors\n      steps.push({ name: 'resuming', indices: [j, j + 1] });\n    }\n    steps.push({ name: 'sorting', index: bars.length - i - 1 });\n  }\n  steps.push({ name: 'sorting', index: 0 });\n  return steps;\n};\n\nexport default bubbleSort;\n","import { Action, Bar } from '../components/SortingAnimation';\n\nconst merge = (\n  bars: Bar[],\n  start: number,\n  mid: number,\n  end: number,\n  animations: Action[]\n) => {\n  let l1 = mid - start + 1;\n  let l2 = end - (mid + 1) + 1;\n  const l: Bar[] = Array.from({ length: l1 }, (_, i) => bars[start + i]);\n  const r: Bar[] = Array.from({ length: l2 }, (_, i) => bars[mid + 1 + i]);\n\n  // start index of l\n  let i = 0;\n\n  // start index of r\n  let j = 0;\n\n  // start index of the merged array\n  let k = start;\n\n  while (i < l1 && j < l2) {\n    animations.push({ name: 'comparing', i: start + i, j: mid + 1 + j });\n    animations.push({ name: 'resuming', indices: [start + i, mid + 1 + j] });\n    if (l[i].height < r[j].height) {\n      animations.push({ name: 'assigning', index: k, newBar: l[i] });\n      bars[k] = l[i];\n      i += 1;\n    } else {\n      animations.push({ name: 'assigning', index: k, newBar: r[j] });\n      bars[k] = r[j];\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < l1) {\n    animations.push({ name: 'assigning', index: k, newBar: l[i] });\n    bars[k] = l[i];\n    k += 1;\n    i += 1;\n  }\n\n  while (j < l2) {\n    animations.push({ name: 'assigning', index: k, newBar: r[j] });\n    bars[k] = r[j];\n    k += 1;\n    j += 1;\n  }\n};\n\nconst mergeSortHelper = (\n  bars: Bar[],\n  start: number,\n  end: number,\n  animations: Action[]\n) => {\n  if (start >= end) {\n    return;\n  }\n  const mid = Math.floor((start + end) / 2);\n  mergeSortHelper(bars, start, mid, animations);\n  mergeSortHelper(bars, mid + 1, end, animations);\n  merge(bars, start, mid, end, animations);\n};\n\nconst mergeSort = (bars: Bar[]): Action[] => {\n  const animations: Action[] = [];\n  mergeSortHelper(bars, 0, bars.length - 1, animations);\n  for (let k = 0; k < bars.length; k++) {\n    animations.push({ name: 'sorting', index: k });\n  }\n  console.log(animations);\n  return animations;\n};\n\nexport default mergeSort;\n","import { Action, Bar } from '../components/SortingAnimation';\nimport swap from '../util/swap';\n\nconst partition = (\n  bars: Bar[],\n  start: number,\n  end: number,\n  animations: Action[]\n): number => {\n  // const mid = Math.floor((start + end) / 2);\n  const pivot = bars[end];\n  animations.push({ name: 'pivoting', index: end });\n  let i = start;\n\n  for (let j = start; j <= end; j++) {\n    animations.push({ name: 'comparing', i: end, j });\n    if (bars[j].height < pivot.height) {\n      animations.push({ name: 'swapping', i, j });\n      animations.push({ name: 'resuming', indices: [i, j] });\n      swap(bars, i, j);\n      i += 1;\n    } else {\n      animations.push({ name: 'resuming', indices: [i, j] });\n    }\n  }\n  animations.push({ name: 'swapping', i, j: end });\n  animations.push({ name: 'resuming', indices: [end, i] });\n  swap(bars, i, end);\n  return i;\n};\n\nconst quickSortHelper = (\n  bars: Bar[],\n  start: number,\n  end: number,\n  animations: Action[]\n) => {\n  if (start >= end) {\n    animations.push({ name: 'sorting', index: start });\n    return;\n  }\n  let partionIndex = partition(bars, start, end, animations);\n  animations.push({ name: 'sorting', index: partionIndex });\n  quickSortHelper(bars, start, partionIndex - 1, animations);\n  quickSortHelper(bars, partionIndex + 1, end, animations);\n};\n\nconst quickSort = (bars: Bar[]): Action[] => {\n  const animations: Action[] = [];\n  quickSortHelper(bars, 0, bars.length - 1, animations);\n  console.log(bars);\n  return animations;\n};\n\nexport default quickSort;\n","import { Action, Bar } from '../components/SortingAnimation';\nimport swap from '../util/swap';\n\nconst selectionSort = (bars: Bar[]) => {\n  const steps: Action[] = [];\n\n  for (let i = 0; i < bars.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < bars.length; j++) {\n      steps.push({ name: 'comparing', i: minIndex, j });\n      if (bars[minIndex].height > bars[j].height) {\n        steps.push({ name: 'resuming', indices: [j, minIndex] });\n        minIndex = j;\n      } else {\n        steps.push({ name: 'resuming', indices: [j] });\n      }\n    }\n    // swap\n    steps.push({ name: 'swapping', i, j: minIndex });\n    swap(bars, i, minIndex);\n    steps.push({ name: 'resuming', indices: [minIndex] });\n    // Elements at index `i` is in a correct order.\n    steps.push({ name: 'sorting', index: i });\n  }\n  steps.push({ name: 'sorting', index: bars.length - 1 });\n  return steps;\n};\n\nexport default selectionSort;\n","import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form, Navbar } from 'react-bootstrap';\nimport { Github } from 'react-bootstrap-icons';\nimport NavbarCollapse from 'react-bootstrap/esm/NavbarCollapse';\nimport bubbleSort from '../algorithms/bubbleSort';\nimport mergeSort from '../algorithms/mergeSort';\nimport quickSort from '../algorithms/quickSort';\nimport selectionSort from '../algorithms/selectionSort';\nimport { Action, Bar } from './SortingAnimation';\n\ninterface CustomBarProp {\n  isSorting: boolean;\n  toggleSorting: (algo: (bars: Bar[]) => Action[]) => void;\n  resizeBars: (newSize: number) => void;\n}\n\nconst algos = [\n  'bubble sort',\n  'selection sort',\n  'merge sort',\n  'quick sort',\n] as const;\ntype Algo = typeof algos[number];\n\nconst getAlgo = (algo: Algo) => {\n  const nameToAlgo = {\n    'bubble sort': bubbleSort,\n    'selection sort': selectionSort,\n    'merge sort': mergeSort,\n    'quick sort': quickSort,\n  };\n\n  return nameToAlgo[algo];\n};\n\nconst CustomBar = ({ resizeBars, isSorting, toggleSorting }: CustomBarProp) => {\n  const [numberOfBars, setNumberOfBars] = useState(32);\n  const [algo, setAlgo] = useState<Algo>(algos[0]);\n\n  useEffect(() => resizeBars(numberOfBars), [numberOfBars]);\n\n  return (\n    <Navbar expand='lg' bg='dark' variant='dark'>\n      <Navbar.Brand href='https://github.com/scottdlai/sorting-animation'>\n        <Github size='2em' />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <NavbarCollapse>\n        <Form className='mr-2' inline>\n          <Form.Control\n            as='select'\n            value={algo}\n            onChange={(algo) => setAlgo(algo.target.value as Algo)}\n            disabled={isSorting}\n            className='mr-2'\n          >\n            {algos.map((algo) => (\n              <option key={algo}>{algo}</option>\n            ))}\n          </Form.Control>\n        </Form>\n        <Form.Control\n          type='range'\n          min={16}\n          max={96}\n          step={4}\n          value={numberOfBars}\n          disabled={isSorting}\n          onChange={({ target: { value } }) => {\n            setNumberOfBars(Number(value));\n          }}\n          className='mr-2'\n        />\n        <ButtonGroup className='mr-2'>\n          <Button\n            variant='info'\n            onClick={() => resizeBars(numberOfBars)}\n            disabled={isSorting}\n          >\n            Regenerate\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button\n            variant={isSorting ? 'danger' : 'success'}\n            onClick={() => toggleSorting(getAlgo(algo))}\n          >\n            {isSorting ? 'Stop' : 'Sort'}\n          </Button>\n        </ButtonGroup>\n      </NavbarCollapse>\n    </Navbar>\n  );\n};\n\nexport default CustomBar;\n","import React, { Reducer, useEffect, useReducer, useState } from 'react';\nimport random from '../util/random';\nimport Body from './Body';\nimport CustomBar from './CustomBar';\n\ntype Status = 'unsorted' | 'sorted' | 'pivot' | 'compared';\n\nexport type Action =\n  | { name: 'swapping'; i: number; j: number }\n  | { name: 'comparing'; i: number; j: number }\n  | { name: 'resuming'; indices: number[] }\n  | { name: 'pivoting'; index: number }\n  | { name: 'resize'; newSize: number }\n  | { name: 'sorting'; index: number }\n  | { name: 'assigning'; index: number; newBar: Bar };\n\nexport interface Bar {\n  readonly height: number;\n  status: Status;\n}\n\nconst getRandomBars = (n: number): Bar[] => {\n  return Array.from({ length: n }, () => {\n    return {\n      height: random(16, 128),\n      status: 'unsorted',\n    };\n  });\n};\n\nconst barsReducer = (prevBars: Bar[], action: Action): Bar[] => {\n  if (action.name === 'resize') {\n    return getRandomBars(action.newSize);\n  }\n\n  if (action.name === 'comparing') {\n    const { i, j } = action;\n    return prevBars.map((bar, k) => {\n      const newStatus =\n        [i, j].includes(k) && bar.status !== 'pivot' ? 'compared' : bar.status;\n      return {\n        ...bar,\n        status: newStatus,\n      };\n    });\n  }\n\n  if (action.name === 'swapping') {\n    const { i, j } = action;\n    return prevBars.map((bar, k) => {\n      if (k === i) {\n        return prevBars[j];\n      }\n\n      if (k === j) {\n        return prevBars[i];\n      }\n\n      return bar;\n    });\n  }\n\n  if (action.name === 'resuming') {\n    const { indices } = action;\n    return prevBars.map((bar, k) => {\n      return { ...bar, status: indices.includes(k) ? 'unsorted' : bar.status };\n    });\n  }\n\n  if (action.name === 'assigning') {\n    const { index, newBar } = action;\n    return prevBars.map((bar, k) => {\n      return k === index ? newBar : bar;\n    });\n  }\n\n  const { index } = action;\n\n  const newStatus = action.name === 'pivoting' ? 'pivot' : 'sorted';\n\n  return prevBars.map((bar, k) => {\n    return { ...bar, status: index === k ? newStatus : bar.status };\n  });\n};\n\nconst SortingAnimation = () => {\n  const [isSorting, setIsSorting] = useState(false);\n  const [animations, setAnimations] = useState<Action[]>([]);\n  const [bars, barsDispatch] = useReducer<Reducer<Bar[], Action>>(\n    barsReducer,\n    []\n  );\n\n  const resizeBars = (newSize: number) => {\n    setAnimations([]);\n    barsDispatch({ name: 'resize', newSize });\n  };\n\n  const finishedSorting = () => isSorting && animations.length === 0;\n\n  const isNotInProgress = () => !isSorting && animations.length === 0;\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (finishedSorting()) {\n        setIsSorting(false);\n        return;\n      }\n\n      if (animations.length === 0 || !isSorting) {\n        return;\n      }\n\n      const [current, ...rest] = animations;\n      barsDispatch(current);\n      setAnimations(rest);\n    }, (8 * 125) / bars.length);\n\n    return () => clearTimeout(timer);\n  }, [animations, isSorting]);\n\n  const toggleSorting = (algo: (bars: Bar[]) => Action[]) => {\n    if (isNotInProgress()) {\n      setAnimations(algo([...bars]));\n    }\n    setIsSorting(!isSorting);\n  };\n\n  return (\n    <>\n      <CustomBar\n        resizeBars={resizeBars}\n        isSorting={isSorting}\n        toggleSorting={toggleSorting}\n      />\n      <Body bars={bars} />\n    </>\n  );\n};\n\nexport default SortingAnimation;\n","import React from 'react';\nimport SortingAnimation from './components/SortingAnimation';\n\nconst App = () => {\n  return <SortingAnimation />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}